project:
  description: Traffic Light application

  # List of packs used in the project.
  packs:
    - pack: ARM::CMSIS@^6.2.0
    - pack: ARM::CMSIS-RTX@^5.9.0
    - pack: ARM::CMSIS-View@^1.2.0
    - pack: Keil::MDK-Middleware@^8.1.0

  # List of connections required or provided by the project.
  connections:
    - connect: Traffic Light
      provides:
        - CMSIS-RTOS2
      consumes:
        - CMSIS_ETH
        - CMSIS_VIO

  # List of #define statements passed via the command line to the build tool.
  define:
    - OS_IDLE_THREAD_NAME: \"Idle\"
    - OS_TIMER_THREAD_NAME: \"Timer\"
    - RTX_NO_MULTITHREAD_CLIB: 1

  # List of include paths.
  add-path:
    - System
    - SafetyClass0
    - SafetyClass1
    - SafetyClass2

  # List of source groups and files.
  groups:
    - group: Documentation
      files:
        - file: README.md
    - group: System
      files:
        - file: app_main.c
        - file: System/faults.c
    - group: Safety Class 0 (Normal)
      files:
        - file: SafetyClass0/NormalOperation.c
        - file: SafetyClass0/OperationVerification.c
    - group: Safety Class 1 (Communication)
      files:
        - file: SafetyClass1/Communication.c
        - file: SafetyClass1/HTTP_Server_CGI.c
        - file: SafetyClass1/Web.c
    - group: Safety Class 2 (Safety)
      files:
        - file: SafetyClass2/SafeModeOperation.c

  # List of components to use for your application.
  components:
    - component: CMSIS:OS Tick:SysTick
    - component: CMSIS:RTOS2:Keil RTX5&Source
    - component: CMSIS-View:Event Recorder&DAP
      not-for-context:
        - .Release
    - component: Network&MDK:CORE
    - component: Network&MDK:Interface:ETH
    - component: Network&MDK:Socket:TCP
    - component: Network&MDK:Socket:UDP
    - component: Network&MDK:Service:Web Server Compact&HTTP

  # List of layers.
  layers:
    - layer: $Board-Layer$
      type: Board

  # List of external tools to be executed.
  executes:
    - execute: Run_FCARM
      run: ${CMAKE_COMMAND} -G Ninja -S $input(0)$ -B ${CMAKE_BINARY_DIR}/FCARM/$Project$.$BuildType$+$TargetType$ -DINPUT_DIRECTORY=$input(1)$ -DOUTPUT=$output$ && ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}/FCARM/$Project$.$BuildType$+$TargetType$ -- --quiet
      always:
      input:
        - SafetyClass1/FCARM            # CMake script directory
        - SafetyClass1/Web              # Input directory with "web files" for FCARM
      output:
        - SafetyClass1/Web.c            # Output file for FCARM

  # List of executable file formats to be generated.
  output:
    type:
      - elf
      - hex
      - map
